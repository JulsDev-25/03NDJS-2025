#*** Les principales faÃ§ons de faire de l'asynchrone : ***#

1. Les callbacks (fonctions de rappel)
ğŸ‘‰ Câ€™est la mÃ©thode la plus "ancienne" et la plus basique.
Exemple en JavaScript :

js
CopierModifier
setTimeout(() => {
  console.log("ExÃ©cutÃ© aprÃ¨s 1 seconde");
}, 1000);
ğŸ”¹ Avantage : Simple Ã  utiliser.
ğŸ”¹ InconvÃ©nient : Peut vite devenir illisible ("callback hell").



2. Les Promises (promesses)
ğŸ‘‰ Introduites pour mieux gÃ©rer les opÃ©rations asynchrones.
Exemple :

js
CopierModifier
fetch('https://api.example.com/data')
  .then(response => response.json())
  .then(data => console.log(data))
  .catch(err => console.error(err));
ğŸ”¹ Avantage : Plus lisible que les callbacks imbriquÃ©s.
ğŸ”¹ InconvÃ©nient : Peut Ãªtre complexe Ã  chaÃ®ner selon les cas.



3. async / await
ğŸ‘‰ Syntaxe moderne pour rendre lâ€™asynchrone lisible comme du synchrone.
Exemple :

js
CopierModifier
async function getData() {
  try {
    const response = await fetch('https://api.example.com/data');
    const data = await response.json();
    console.log(data);
  } catch (error) {
    console.error(error);
  }
}
ğŸ”¹ Avantage : TrÃ¨s lisible, proche du code synchrone.
ğŸ”¹ InconvÃ©nient : Doit Ãªtre utilisÃ© dans une fonction marquÃ©e async.


Reject: chaine de caractÃ¨re spÃ©cial pour definir les conditions
